name: Fetch Soccerverse Tactics

on:
  workflow_dispatch:
    inputs:
      season_id:
        description: "Season ID"
        default: "2"
        required: true
      leagues_csv:
        description: "CSV leagues (leave empty to use the built-in default list)"
        default: ""
        required: false
      refresh_days:
        description: "Re-scan window for played fixtures"
        default: "14"
        required: true
  schedule:
    - cron: "0 6 * * 0"   # Tous les dimanches à 06:00 UTC

concurrency:
  group: fetch-tactics
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      # Secrets Supabase
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}

      # Params (inputs si dispatch, sinon vides: on fixera des defaults plus bas)
      SEASON_ID: ${{ inputs.season_id }}
      LEAGUES_CSV: ${{ inputs.leagues_csv }}
      REFRESH_DAYS: ${{ inputs.refresh_days }}

      # Réglages d'exécution
      PAR: "2"                  # ↓ parallélisme plus bas
      RPC_QPS: "0.8"            # ↓ cadence requêtes/sec
      LEAGUE_PAUSE_S: "1.5"     # pause entre ligues

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('script/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f script/requirements.txt ]; then
            pip install -r script/requirements.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install supabase==2.6.0 httpx==0.27.0 python-dotenv==1.0.1
          fi

      - name: Preflight Supabase env
        run: |
          [ -n "${SUPABASE_URL}" ] || { echo "❌ Missing SUPABASE_URL"; exit 1; }
          [ -n "${SUPABASE_SERVICE_ROLE}" ] || { echo "❌ Missing SUPABASE_SERVICE_ROLE"; exit 1; }
          echo "✅ Supabase env present"

      - name: Resolve inputs/defaults
        run: |
          # Applique des valeurs par défaut si appel via cron (inputs vides)
          echo "SEASON_ID=${SEASON_ID:-2}" >> $GITHUB_ENV
          echo "LEAGUES_CSV=${LEAGUES_CSV:-}" >> $GITHUB_ENV
          echo "REFRESH_DAYS=${REFRESH_DAYS:-14}" >> $GITHUB_ENV
          echo "PAR=${PAR:-2}" >> $GITHUB_ENV
          echo "RPC_QPS=${RPC_QPS:-0.8}" >> $GITHUB_ENV
          echo "LEAGUE_PAUSE_S=${LEAGUE_PAUSE_S:-1.5}" >> $GITHUB_ENV
          echo "Using SEASON_ID=$SEASON_ID LEAGUES_CSV='${LEAGUES_CSV}' REFRESH_DAYS=$REFRESH_DAYS PAR=$PAR RPC_QPS=$RPC_QPS LEAGUE_PAUSE_S=$LEAGUE_PAUSE_S"

      # (Optionnel) petit décalage pour éviter l'effet troupeau
      - name: Gentle stagger
        shell: bash
        run: |
          SECS=$(( (RANDOM % 20) + 5 ))
          echo "Sleeping ${SECS}s to stagger..."
          sleep "${SECS}"

      - name: Run fetcher
        run: |
          python script/fetch_tactics.py
          # Sans args => le script lit SEASON_ID/LEAGUES_CSV/REFRESH_DAYS/PAR/RPC_QPS/LEAGUE_PAUSE_S depuis l'env
          # Pour forcer une liste: ajoutez --leagues "548,549"
